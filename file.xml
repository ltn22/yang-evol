<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.14 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC8724 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8724.xml">
<!ENTITY RFC9363 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9363.xml">
<!ENTITY RFC9254 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9254.xml">
<!ENTITY I-D.ietf-core-comi SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-core-comi.xml">
<!ENTITY I-D.ietf-lpwan-architecture SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-lpwan-architecture.xml">
<!ENTITY I-D.toutain-schc-universal-option SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.toutain-schc-universal-option.xml">
<!ENTITY I-D.toutain-schc-sid-allocation SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.toutain-schc-sid-allocation.xml">
<!ENTITY SELF "[RFC-XXXX]">
]>


<rfc docName="draft-toutain-schc-coreconf-management" category="std" submissionType="IETF">

  <front>
    <title abbrev="SCHC for CoAP">CORECONF Rule management for SCHC</title>

    <author initials="A." surname="Minaburo" fullname="Ana Minaburo">
      <organization>Consultant</organization>
      <address>
        <postal>
          <street>Rue de Rennes</street>
          <city>Cesson-Sevigne</city>
          <code>35510</code>
          <country>France</country>
        </postal>
        <email>anaminaburo@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Toutain" fullname="Laurent Toutain">
      <organization>IMT Atlantique</organization>
      <address>
        <postal>
          <street>CS 17607, 2 rue de la Chataigneraie</street>
          <city>Cesson-Sevigne Cedex</city>
          <code>35576</code>
          <country>France</country>
        </postal>
        <email>Laurent.Toutain@imt-atlantique.fr</email>
      </address>
    </author>
    <author initials="C." surname="Banier" fullname="Corentin Banier">
      <organization>IMT Atlantique</organization>
      <address>
        <postal>
          <street>CS 17607, 2 rue de la Chataigneraie</street>
          <city>Cesson-Sevigne Cedex</city>
          <code>35576</code>
          <country>France</country>
        </postal>
        <email>corentin.banier@imt-atlantique.fr</email>
      </address>
    </author>
    <author initials="M." surname="Dumay" fullname="Marion Dumay">
      <organization>Orange</organization>
      <address>
        <email>marion.dumay@orange.com</email>
      </address>
    </author>

    <date year="2025" month="May" day="20"/>

    <area>Internet</area>
    <workgroup>SCHC Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describe how CORECONF management can be applied to SCHC Context.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introductionintro" title="Introduction{#intro}">

<t><xref target="RFC9363"/> defines the YANG Data Model for a SCHC context (a.k.a Set of Rules). <xref target="I-D.ietf-lpwan-architecture"/> proposes the architecture for rule management. Some rules must be clearly dedicated to the modification of the context.</t>

<t><xref target="RFC9254"/> defines a way to serialize data issued from a YANG DM into a CBOR representation and <xref target="I-D.ietf-core-comi"/> defines the CoAP interface.</t>

<t>This document describes in which condition management can be done, how to manage rules inside an SCHC instance using CORECONF and proposes some compression rules for the protocol headers.</t>

</section>
<section anchor="applicability-statement" title="Applicability statement">

<section anchor="architecture" title="Architecture">

<t>SCHC instance management allows the two end-points to modify the common SoR, by:</t>

<t><list style="symbols">
  <t>modifyng rules values (such as TV, MO or CDA) in existing rules</t>
  <t>adding a new rule or</t>
  <t>removing an existing rules.</t>
</list></t>

<t>The rule management uses the CORECONF interface <xref target="I-D.ietf-core-comi"/> based on CoAP. The management traffic is carried as SCHC compressed packets tagged to some specific rule IDs. They are identified as M rules in Figure <xref target="Fig-SCHCManagement"/>.  M Rules can be either Compression rules or No compression rules. Only M rules can modify the SoR.</t>

<t>SCHC Packets using M Rules MUST be encrypted either by the underlying layer (for instance in a QUIC stream dedicated to managenement inside a QUIC connection) or directly using OSCORE of DTLS.</t>

<figure title="Inband Management" anchor="Fig-SCHCManagement"><artwork type="aasvg"><![CDATA[
+-----------------+                 +-----------------+
|       ^         |                 |       ^         |
|  C/D  !  M ___  |                 |       !  M ___  |
|       +-->[SoR] |       ...       |       +-->[SoR] |
|       !   [___] |                 |       !   [___] |
|       !         |                 |       !         |
|      F/R        |                 |      F/R        |
+------ins_id1----+-----ins_idi-----+------ins_idn----+         
.                   C/D  !                       ___  .
.                        +--------------------->[SoR] .    
.                       F/R               M     [___] .
+.................. Discriminator ....................+
]]></artwork></figure>

</section>
<section anchor="coap-profile" title="CoAP Profile">

<t>Management requests MUST be protected against packet losts. It is RECOMMENDED to use CONfirmable requests and no Token. If the management request is too large regarding the MTU, SCHC Fragmentation SHOULD be used instead of the Block option.</t>

</section>
<section anchor="rule-modification" title="Rule modification">

<t>SCHC imposes that both ends share exactly the same SoR, therefore, a new or modified rule cannot be used while it remains in candidate status until the other end has validated the modification.
A candidate rule cannot be used, either in C/D or F/R. A SCHC PDU MUST NOT be generated with a candidate rule ID and received PDUs containing a candidate rule ID must be dropped.</t>

<figure title="Modifying a rule" anchor="Fig-Rule-mod"><artwork type="aasvg"><![CDATA[
              A                         X  B
 X valid      |     modify Rule x    ------| X valid
 X candidate  |=====================/=====>| X candidate
              |        /------------       |
           ---|<======/====================|----
            | |      /                     |  |
     Guard  | |<-----                      |  | Guard
            v |                            |  v
           ---|                            |----   
 X valid      |                            | X valid

]]></artwork></figure>

<t><xref target="Fig-Rule-mod"/> illustrates a Rule modification. The left-hand side entity A wants to make rule x evolve.  It send and acknowledged CoAP message to the other end. 
A change the status of the rule to candidate, indicating that the rule cannot be used anymore for SCHC procedures. The receiving entity B, acknowledge the message,
and contiue to maintain the rule candidate for a guard period. At the reception of the acknowledgement, A set also a guard period before rule x becomes valid again.</t>

<t>The guard period is used to avoid SCHC message with a rule ID to appear at the other end after a rule modification. The Guard period appears only once during the rule management and is depends on the out-of-sequence messages expected between both ends.</t>

</section>
<section anchor="rule-creation" title="Rule creation">

<t>Rule creation do not require a guard period, and acknowledgment is RECOMMENDED. Figure <xref target="Fig-Rule-creation"/> gives an example, where the Acknowledgment is lost.
Entity A sends a management message to create a new rule. Since its a new rule, the guard period is not set and the new rule becomes immediatly valid on B. 
The Acknowledgement does not reach back A, so the rule stays in the candidate state, but the reception of a SCHC PDU carrying the RulE ID X, informs that the
message has been correctly received by B. So X becomes valid in A.</t>

<figure title="Modifying a rule" anchor="Fig-Rule-creation"><artwork type="aasvg"><![CDATA[
              A                            B
 X created    |       
 X candidate  |===========================>| X valid
              |         X==================|
              |                            |   
   X valid    |<---------------------------|   
              |               X            | 
              |                            | 

]]></artwork></figure>

</section>
<section anchor="rule-deletion" title="Rule deletion">

<t>After the rule deletion, a Guard period is established. During that period, a rule with the same ID cannot be created, and SCHC PDU corrying the Rule ID are dropped.</t>

</section>
</section>
<section anchor="management-messages" title="Management messages">

<section anchor="yang-data-model" title="YANG Data Model">
<t>CORECONF proposes an interface to manage data structured with a YANG Data Model. RFC 9363 defines a YANG Data Model for SCHC Rules. 
SCHC Instance Management MUST use FETCH to read a rule and iPATCH to create, modify or delete a rule.
In order to accomplish management, the YANG Data Model has been updated.</t>

<section anchor="feature-management" title="Feature management">
<t>M Rules have to be marked in a way that allows quickly identifying which rules in a SoR are responsible for management. 
Therefore, a new feature named “management” has been defined, which characterizes a new “nature-management” type.
This nature is actually a specialization of “nature-compression” for management purposes.</t>

</section>
<section anchor="guard" title="Guard">
<t>To determine if a rule is considered available or not during the guard period, a rule needs to have a status which determines if it can be used. Basically, an available rule MUST associate the key “rule-status” with the value “status-active”.
Conversely, during the guard period, “rule-status” MUST be set to “status-candidate”.</t>

</section>
<section anchor="yang-tree-representation" title="YANG tree representation">
<t>The YANG tree represents the Rule structure as defined in RFC 9363 with the two updates described above:</t>

<figure title="Updated YANG Data Model for CORECONF" anchor="Fig-tree"><artwork><![CDATA[
module: ietf-schc
  +--rw schc
     +--rw rule* [rule-id-value rule-id-length]
        +--rw rule-id-value                   uint32
        +--rw rule-id-length                  uint8
        +--rw rule-status                     status-type
        +--rw rule-nature                     nature-type
        +--rw (nature)?
           +--:(fragmentation) {fragmentation}?
           |  +--rw fragmentation-mode        schc:fragmentation-mode-type
           |  +--rw l2-word-size?             uint8
           |  +--rw direction                 schc:di-type
           |  +--rw dtag-size?                uint8
           |  +--rw w-size?                   uint8
           |  +--rw fcn-size                  uint8
           |  +--rw rcs-algorithm?            rcs-algorithm-type
           |  +--rw maximum-packet-size?      uint16
           |  +--rw window-size?              uint16
           |  +--rw max-interleaved-frames?   uint8
           |  +--rw inactivity-timer
           |  |  +--rw ticks-duration?   uint8
           |  |  +--rw ticks-numbers?    uint16
           |  +--rw retransmission-timer
           |  |  +--rw ticks-duration?   uint8
           |  |  +--rw ticks-numbers?    uint16
           |  +--rw max-ack-requests?         uint8
           |  +--rw (mode)?
           |     +--:(no-ack)
           |     +--:(ack-always)
           |     +--:(ack-on-error)
           |        +--rw tile-size?          uint8
           |        +--rw tile-in-all-1?      schc:all-1-data-type
           |        +--rw ack-behavior?       schc:ack-behavior-type
           +--:(compression) {compression or management}?
              +--rw entry* [field-id field-position direction-indicator]
                 +--rw field-id                    schc:fid-type
                 +--rw field-length                union
                 +--rw field-position              uint8
                 +--rw direction-indicator         schc:di-type
                 +--rw target-value* [index]
                 |  +--rw index    uint16
                 |  +--rw value?   binary
                 +--rw matching-operator           schc:mo-type
                 +--rw matching-operator-value* [index]
                 |  +--rw index    uint16
                 |  +--rw value?   binary
                 +--rw comp-decomp-action          schc:cda-type
                 +--rw comp-decomp-action-value* [index]
                    +--rw index    uint16
                    +--rw value?   binary
]]></artwork></figure>

</section>
</section>
<section anchor="set-of-rules-editing" title="Set of Rules Editing">
<t>For clarity reasons, this document will use YANG Identifiers in quotes instead of the SID values.
In the YANG tree, all the lines of the tree have a SID number. Each level of the hierarchy is accessible through one or several keys. For example, to access the hierarchy under “rule”, “rule-id-value” and “rule-id-length” must be specified. To access the hierarchy describing an entry in a compression rule, “rule-id-value” and “rule-id-length” must be followed by “field-id”, “field-position” and “direction-indicator”. Since the TV, MO-value and CDA-value are stored as lists, “index” must be added to access a specific element.</t>

<t>Therefore, to access a specific element in a hierarchy, the SID of this element has to be specified, followed by the keys needed to access it.</t>

<t>For example, <spanx style="verb">["target-value/value", 5, 3, "fid-ipv6-version", 1, "di-bidirectional", 0]</spanx> is used to access the first value (0) of TV for the IPv6 Version of Rule 5/3.</t>

<section anchor="fetch" title="FETCH">
<t>As mentionned in <xref target="I-D.ietf-core-comi"/>, FETCH request helps to retrieve at least one instance-value.</t>

<t>Example : Fetching TV, MO and CDA of the Entry fid-ipv6-version/1/bidirectional from Rule 6/3.</t>

<figure><artwork><![CDATA[
REQ: FETCH /c
     (Content-Format: application/yang-identifiers+cbor-seq)
["target-value",       6, 3, "fid-ipv6-version", 1, "di-bidirectional"],
["matching-operator",  6, 3, "fid-ipv6-version", 1, "di-bidirectional"],
["comp-decomp-action", 6, 3, "fid-ipv6-version", 1, "di-bidirectional"]

RES: 2.05 Content
     (Content-Format: application/yang-instances+cbor-seq)
{
  {"target-value"       : [{"index" : 0, "value" : h"06"}]},
  {"matching-operator"  : "mo-equal"},
  {"comp-decomp-action" : "cda-not-sent"}
}
]]></artwork></figure>

</section>
<section anchor="ipatch" title="iPATCH">
<t>To write an iPATCH request, several methods could be used. For instance, in a Rule 7/8, an entry for a field was set to ignore/value-sent and the target-value was not set, these following commands specify a new TV and change the MO and CDA :</t>

<t><list style="symbols">
  <t>Specified all conserned fields :  <vspace blankLines='1'/>
    <figure><artwork><![CDATA[
iPATCH /c 
{
  ["target-value", 7, 8, field, 1, "di-bidirectional"] : [{delta_TV: 0, delta_value: value}],
  ["matching-operator", 7, 8, field, 1, "bi-directional"] : "mo-equal",
  ["comp-decomp-action", 7, 8, field, 1, "bi-directional"] : "cda-not-sent"
}
]]></artwork></figure>
  </t>
  <t>This can also be specified in a single entry, by setting the sub-tree:  <vspace blankLines='1'/>
    <figure><artwork><![CDATA[
iPATCH /c 
{
  ["entry", 7, 8, field, 1, "di-bidirectional"] : { 
      delta_target-value       : [{delta_index : 0, delta_value : value}],
      delta_matching-operator  : "mo-equal",
      delta_comp-decomp-action : "cda-not-sent"
  }
}
]]></artwork></figure>
  </t>
</list></t>

<t>The same principle is applied to rules and “leaf-list”.</t>

<section anchor="add" title="Add">
<t>If the target object doesn’t exist in the context, then it is appended. 
It supports three main cases:
* Adding a new key-value pair to an existing object
* Adding a new object to an existing list</t>

<t>One important specification is that for every leaf-list, the YANG Data Model describes that every index should be incremental. In CORECONF, we trust the user/system.</t>

<t>Example:
- Add TV into fid-ipv6-payload-length/1/di-bidirectional in Rule 0/3</t>

<!--
  ~~~
  REQ: iPATCH /c
      (Content-Format: application/yang-identifiers+cbor-seq)
  {
  ["target-value", 0, 3, "fid-ipv6-payload-length", 1, "di-bidirectional"] : [
      {delta_index : 0, delta_value : h"50"},
      {delta_index : 1, delta_value : h"55"}
  ]
  }
  
  RES: 2.04 Changed
  ~~~
-->
<t>#### Update
A request can be considered as an update if the target associated with the various keys is present in the context. Otherwise, it could be consider as an add or an error.</t>

<t>Example : 
- The Entry fid-ipv6-version/1/di-bidirectional is in Rule 6/3.</t>

<!--
  ~~~
  REQ: iPATCH /c
      (Content-Format: application/yang-identifiers+cbor-seq)
  {
  ["entry", 6, 3, "fid-ipv6-version", 1, "di-bidirectional"] : {
      {"delta_target-value"       : []},
      {"delta_matching-operator"  : "mo-ignore"},
      {"delta_comp-decomp-action" : "cda-value-sent"}
  }
  }
  
  RES: 2.04 Changed
  ~~~
-->

<t><list style="symbols">
  <t>The Entry fid-ipv6-version/1/di-bidirectional is in not in Rule 7/8 but Rule 7/8 exist.</t>
</list></t>

<!--
  ~~~
  REQ: iPATCH /c
       (Content-Format: application/yang-identifiers+cbor-seq)
  {
    ["entry", 7, 8, "fid-ipv6-version", 1, "di-bidirectional"] : {
        {"delta_target-value"       : []},
        {"delta_matching-operator"  : "mo-ignore"},
        {"delta_comp-decomp-action" : "cda-value-sent"}
    }
  }
  
  RES: 2.04 Changed
  ~~~
  -->

<t><list style="symbols">
  <t>The Entry fid-ipv6-version/1/di-bidirectional is not in Rule 5/8, and Rule 5/8 does not exist. Therefore, Rule 5/8 cannot be added in order to include the Entry fid-ipv6-version/1/di-bidirectional because other fields, which are not keys, cannot be deducted at every depth of the context.  <vspace blankLines='1'/>
    <figure><artwork><![CDATA[
REQ: iPATCH /c
     (Content-Format: application/yang-identifiers+cbor-seq)
{
  ["entry", 5, 8, "fid-ipv6-version", 1, "di-bidirectional"] : {
      {"delta_target-value"       : []},
      {"delta_matching-operator"  : "mo-ignore"},
      {"delta_comp-decomp-action" : "cda-value-sent"}
  }
}
  
RES: 4.04 Not Found
]]></artwork></figure>
  </t>
</list></t>

</section>
<section anchor="delete" title="Delete">
<t>To remove an object we use “null” value.</t>

<t>Example:
- Delete Rule 7/8</t>

<!--
  ~~~
  REQ: iPATCH /c
       (Content-Format: application/yang-identifiers+cbor-seq)
  {
    ["rule", 7, 8]: null
  }
  
  RES: 2.04 Changed
  ~~~
-->

<t>For deletion, we limit the actions and consider a minimal CORECONF representation as</t>

<t><spanx style="verb">{"ietf-schc:schc" : {"rule" : []}}</spanx>
. 
Therefore, a request trying to delete “ietf-schc:schc” will set the CORECONF representation to the minimal one.
Additionally, while updates are authorized, deleting a protected key is forbidden.</t>

<t>Example:
- Delete rule-id-value of Rule 0/3</t>

<!--
  ~~~
  REQ: iPATCH /c
       (Content-Format: application/yang-identifiers+cbor-seq)
  {
    ["rule-id-value", 0, 3]: null
  }
  
  RES: 4.00 Bad Request
  ~~~
-->

</section>
</section>
<section anchor="optimization" title="Optimization">

<t>This process imposes to send the full rule in the value part, so an optimization can be done by deriving an exisiting rule and modify some parameters.</t>

<t><xref target="I-D.toutain-schc-universal-option"/> augments the data model for universal options. This add to compression rules a new entry format where a field is indexed with:
* a space-id, a YANG identifier refering to the protocol containing options (CoAP, QUIC, TCP,…)
* the option used in the protocol
* the position</t>

<figure><artwork><![CDATA[
  +--rw schc-opt:entry-option-space* \
      [space-id option-value field-position direction-indicator]
     +--rw schc-opt:space-id                    space-type
     +--rw schc-opt:option-value                uint32
     +--rw schc-opt:field-length                union
     +--rw schc-opt:field-position              uint8
     +--rw schc-opt:direction-indicator         schc:di-type
     +--rw schc-opt:target-value* [index]
     |  +--rw schc-opt:index    uint16
     |  +--rw schc-opt:value?   binary
     +--rw schc-opt:matching-operator           schc:mo-type
     +--rw schc-opt:matching-operator-value* [index]
     |  +--rw schc-opt:index    uint16
     |  +--rw schc-opt:value?   binary
     +--rw schc-opt:comp-decomp-action          schc:cda-type
     +--rw schc-opt:comp-decomp-action-value* [index]
        +--rw schc-opt:index    uint16
        +--rw schc-opt:value?   binary
]]></artwork></figure>

<t>In the CORECONF representation, even if the name are similar in the structure, the SID values are different. The key contains for an entry contains 4 elements.</t>

<figure><artwork><![CDATA[
REQ: FETCH </c>
        (Content-Format: application/yang-identifiers+cbor-seq)
   ["schc-opt:matching-operator", 8, 3, "schc-opt:space-id-CoAP", 11, 1, "di-up"]
]]></artwork></figure>

</section>
</section>
<section anchor="rpc" title="RPC">

<t>Represented as a tree:</t>

<figure><artwork><![CDATA[
  rpcs:
    +---x duplicate-rule
       +---w input
       |  +---w from
       |  |  +---w rule-id-value?    uint32
       |  |  +---w rule-id-length?   uint8
       |  +---w to
       |     +---w rule-id-value?    uint32
       |     +---w rule-id-length?   uint8
       +--ro output
          +--ro status?   string
]]></artwork></figure>

<t>After duplication, the new rule stays in a candidate state until the new values are set.</t>

</section>
</section>
<section anchor="protocol-stack" title="Protocol Stack">

<t>The management inside the instance has its own IPv6 stack totally independant of the rest of the system. The goal is to implement IPv6/UDP/CoAP to allow the implementation of the CORECONF interface. No other kind of traffic is allowed.</t>

<t>The end-point acting as a Device has the IPv6 address fe80::1/64 and the other end fe80::2/64.</t>

<t>Both implements CoAP client and server capabilities. The server uses port 5683 and the client 3865.</t>

<section anchor="compression-rules" title="Compression Rules">

<t>Two rules are required for management functionality. The first rule (RuleID 0) defines packets containing application payloads that include a CoAP Content-Format field. Depending on the direction (Up or Down), this rule manages Confirmable FETCH/iPATCH requests or Non-Confirmable Content responses accordingly. Therefore, the second rule (RuleID 1) is used to compress packets which do not include application payload, basically response packets in downlink.</t>

<figure title="Management Rule 0" anchor="Fig-Management-Rule"><artwork><![CDATA[
 +---------------------------------------------------------------------------------------------+
 |RuleID 0                                                                                     |
 +-------------------+--+--+--+-------------------------------------+-------------+------------+
 |        FID        |FL|FP|DI|                  TV                 |     MO      |    CDA     |
 +-------------------+--+--+--+-------------------------------------+-------------+------------+
 |IPv6 Version       |4 |1 |Bi|6                                    |equal        |not-sent    |
 |IPv6 Traffic Class |8 |1 |Bi|1                                    |equal        |not-sent    |
 |IPv6 Flow Label    |20|1 |Bi|144470                               |equal        |not-sent    |
 |IPv6 Length        |16|1 |Bi|                                     |ignore       |compute-*   |
 |IPv6 Next Header   |8 |1 |Bi|17                                   |equal        |not-sent    |
 |IPv6 Hop Limit     |8 |1 |Bi|64                                   |equal        |not-sent    |
 |IPv6 DevPrefix     |64|1 |Bi|fe80::/64                            |equal        |not-sent    |
 |IPv6 DevIID        |64|1 |Bi|::2                                  |equal        |not-sent    |
 |IPv6 AppPrefix     |64|1 |Bi|fe80::/64                            |equal        |not-sent    |
 |IPv6 AppIID        |64|1 |Bi|::1                                  |equal        |not-sent    |
 +===================+==+==+==+=====================================+=============+============+
 |UDP DevPort        |16|1 |Bi|3865                                 |equal        |not-sent    |
 |UDP AppPort        |16|1 |Bi|5683                                 |equal        |not-sent    |
 |UDP Length         |16|1 |Bi|                                     |ignore       |compute-*   |
 |UDP Checksum       |16|1 |Bi|                                     |ignore       |compute-*   |
 +===================+==+==+==+=====================================+=============+============+
 |CoAP Version       |2 |1 |Bi|1                                    |equal        |not-sent    |
 |CoAP Type          |2 |1 |Dw|2                                    |equal        |not-sent    |
 |CoAP Type          |2 |1 |Up|0                                    |equal        |not-sent    |
 |CoAP TKL           |4 |1 |Bi|0                                    |equal        |not-sent    |
 |CoAP Code          |8 |1 |Up|[5, 7]                               |match-mapping|mapping-sent|
 |CoAP Code          |8 |1 |Dw|69                                   |equal        |not-sent    |
 |CoAP MID           |16|1 |Bi|0                                    |MSB(9)       |LSB         |
 |CoAP Uri-Path      |8 |1 |Bi|c                                    |equal        |not-sent    |
 |CoAP Content-Format|8 |1 |Bi|application/yang-identifiers+cbor-seq|equal        |not-sent    |
 +===================+==+==+==+=====================================+=============+============+
]]></artwork></figure>

<figure title="Management Rule 1" anchor="Fig-Management-Rule"><artwork><![CDATA[
 +---------------------------------------------------------------------------------------------+
 |RuleID 1                                                                                     |
 +-------------------+--+--+--+-------------------------------------+-------------+------------+
 |        FID        |FL|FP|DI|                  TV                 |     MO      |    CDA     |
 +-------------------+--+--+--+-------------------------------------+-------------+------------+
 |IPv6 Version       |4 |1 |Bi|6                                    |equal        |not-sent    |
 |IPv6 Traffic Class |8 |1 |Bi|1                                    |equal        |not-sent    |
 |IPv6 Flow Label    |20|1 |Bi|144470                               |equal        |not-sent    |
 |IPv6 Length        |16|1 |Bi|                                     |ignore       |compute-*   |
 |IPv6 Next Header   |8 |1 |Bi|17                                   |equal        |not-sent    |
 |IPv6 Hop Limit     |8 |1 |Bi|64                                   |equal        |not-sent    |
 |IPv6 DevPrefix     |64|1 |Bi|fe80::/64                            |equal        |not-sent    |
 |IPv6 DevIID        |64|1 |Bi|::2                                  |equal        |not-sent    |
 |IPv6 AppPrefix     |64|1 |Bi|fe80::/64                            |equal        |not-sent    |
 |IPv6 AppIID        |64|1 |Bi|::1                                  |equal        |not-sent    |
 +===================+==+==+==+=====================================+=============+============+
 |UDP DevPort        |16|1 |Bi|3865                                 |equal        |not-sent    |
 |UDP AppPort        |16|1 |Bi|5683                                 |equal        |not-sent    |
 |UDP Length         |16|1 |Bi|                                     |ignore       |compute-*   |
 |UDP Checksum       |16|1 |Bi|                                     |ignore       |compute-*   |
 +===================+==+==+==+=====================================+=============+============+
 |CoAP Version       |2 |1 |Bi|1                                    |equal        |not-sent    |
 |CoAP Type          |2 |1 |Dw|2                                    |equal        |not-sent    |
 |CoAP TKL           |4 |1 |Bi|0                                    |equal        |not-sent    |
 |CoAP Code          |8 |1 |Dw|[68, 128, 132]                       |match-mapping|mapping-sent|
 |CoAP MID           |16|1 |Bi|0                                    |MSB(9)       |LSB         |
 +===================+==+==+==+=====================================+=============+============+
]]></artwork></figure>

</section>
</section>
<section anchor="oscore" title="OSCORE">

<section anchor="compression-rules-1" title="Compression Rules">

</section>
</section>
<section anchor="dtls" title="DTLS">

<section anchor="compression-rules-2" title="Compression Rules">

</section>
</section>
<section anchor="example-coreconf-usage-in-python" title="Example CORECONF Usage in Python">

<figure><artwork><![CDATA[
from typing import Dict, Generator, Tuple
from copy import deepcopy

import pytest

from src.coreconf.coreconf_manager import CORECONFManager
from src.coreconf.coreconf_matching import CORECONFMatchingData


@pytest.fixture
def test_context() -> Generator[Tuple[CORECONFManager, Dict], None, None]:
    """
    Initialize CORECONFManager with test data and provide original context for comparison.

    Returns:
        (Generator[Tuple[CORECONFManager, Dict]]): Manager and original context
    """

    sid_file: str = "./data/yang/ietf-schc@2025-04-16.sid"
    model_file: str = "./data/yang/description.json"
    context_file: str = "./data/context/test.json"

    cc_manager: CORECONFManager = CORECONFManager(
        sid_filename=sid_file,
        yang_model_description_filename=model_file,
        context_filename=context_file,
    )

    # Store original context for comparison without modifying the cc_manager
    original_context: Dict = deepcopy(cc_manager.coreconf_context)

    yield cc_manager, original_context

    # Cleanup
    cc_manager.cancel_pending_timers()

# ********************************************************************** #

def perform_modification(cc_manager: CORECONFManager, yang_request: Dict):
    """Helper to perform modification operation."""

    matching: CORECONFMatchingData = cc_manager.prepare_ipatch_management_request(
        sid_request_args=cc_manager.format_clear_request(request_args=yang_request)
    )[0]

    cc_manager.modify_object(matching_data=matching)

# ********************************************************************** #

def verify_context_equals(cc_manager: CORECONFManager, expected_context: Dict):
    """Assert the context matches expected value."""

    assert cc_manager.check_coreconf_context_equivalence(
        other_coreconf_context=expected_context
    )

# ********************************************************************** #

def verify_context_unchanged(cc_manager: CORECONFManager, original_context: Dict):
    """Assert the context remains unchanged."""

    verify_context_equals(cc_manager=cc_manager, expected_context=original_context)

# =========================== DELETION TESTS =========================== #

def test_delete_root_element(test_context):
    """
    Test deletion of the root element.

    When the root element is deleted, all SCHC rules should be removed,
    but not the entire structure whose minimal structure is {5100: {1: []}}.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc"): None
    }

    expected_result: Dict = {5100: {1: []}}

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_delete_rule(test_context):
    """
    Test deletion of a specific rule.

    When deleting rule 0/3, that specific rule should be removed from the
    configuration while all other rules remain intact.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule", 0, 3): None
    }

    expected_result: Dict = {5100: {1: [{33: 3, 34: 2, 35: 5091, 36: 5094}]}}

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_delete_existing_entry(test_context):
    """
    Test deletion of a specific entry from a rule.

    When deleting the IPv6 Version entry from rule 0/3, the entry should be removed
    while all other entries in the rule remain intact.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry", 0, 3, "fid-ipv6-version", 1, "di-bidirectional"): None
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_delete_on_basic_key(test_context):
    """
    Test deletion of a basic key from a rule.

    When deleting the rule-status field from rule 0/3, that attribute
    should be removed while all other attributes of the rule remain intact.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/rule-status", 0, 3): None
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 0, 35: 5088
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_delete_leaf_list_single(test_context):
    """
    Test deletion of a single value from a leaf-list.

    When deleting a specific target value (index 0) from the IPv6 Version entry,
    as there is only this value in this structure, the entire key:value is removed.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry/target-value/value", 0, 3, "fid-ipv6-version", 1, "di-bidirectional", 0): None
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_delete_leaf_list_several(test_context):
    """
    Test deletion of a value from a multi-value leaf-list.

    When deleting the second value (index 1) from the traffic class entry,
    only that specific value should be removed, with other values preserved,
    even if indexes become non-incremental.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry/target-value/value", 0, 3, "fid-ipv6-trafficclass", 1, "di-bidirectional", 1): None
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_delete_unknown_entry(test_context):
    """
    Test deletion of a non-existent entry.

    When attempting to delete an entry that doesn't exist (fid-ipv6-version in rule 2/3),
    the context should remain unchanged as there's nothing to delete.
    """

    cc_manager: CORECONFManager
    original_context: Dict
    cc_manager, original_context = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry", 2, 3, "fid-ipv6-version", 1, "di-bidirectional"): None
    }

    perform_modification(cc_manager, yang_request)
    verify_context_unchanged(cc_manager, original_context)

# ********************************************************************** #

def test_delete_protected_key(test_context):
    """
    Test deletion of a protected key.

    When attempting to delete a protected key (rule-id-value), the operation
    should fail and the context should remain unchanged.
    """
    cc_manager: CORECONFManager
    original_context: Dict
    cc_manager, original_context = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/rule-id-value", 0, 3): None
    }

    perform_modification(cc_manager, yang_request)
    verify_context_unchanged(cc_manager, original_context)

# ======================= UPDATE TESTS =======================

def test_update_protected_key(test_context):
    """
    Test updating a protected key.

    When updating a protected key (rule-id-value), the operation should succeed
    and the value should be changed according to the request.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/rule-id-value", 0, 3): 5
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 5, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_update_basic_key(test_context):
    """
    Test updating a basic key.

    When updating a basic key (rule-status), the value should be changed
    according to the request. This tests changing from "active" to "candidate" status.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/rule-status", 0, 3): "status-candidate"
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 0, 35: 5088, 36: 5096
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ======================= ADDITION TESTS =======================

def test_add_new_entry(test_context):
    """
    Test adding a new entry to a rule.

    When adding a new IPv6 App Prefix entry to rule 0/3,
    the entry should be properly added.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry", 0, 3, "fid-ipv6-appprefix", 1, "di-bidirectional"): {
            "field-length": 64,
            "target-value": [
                {"index": 0, "value": "/oAAAAAAAAA="} # b"\xfe\x80\x00\x00\x00\x00\x00\x00"
            ],
            "matching-operator": "ietf-schc:mo-equal",
            "comp-decomp-action": "ietf-schc:cda-not-sent"
        }
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]},
                        {1: 5015, 5: 5018, 6: 5057, 7: 64, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\xfe\x80\x00\x00\x00\x00\x00\x00"}]}
                    ],
                    33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_add_leaf_list_incremental(test_context):
    """
    Test adding a new value to a leaf-list with incremental index.

    When adding a new value with index 4 to the IPv6 Flow Label entry,
    the value should be properly added.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry/target-value", 0, 3, "fid-ipv6-flowlabel", 1, "di-bidirectional"): {
            "index": 4, "value": "vLw="
        }
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"},
                                {1: 4, 2: b"\xbc\xbc"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_add_leaf_list_non_incremental(test_context):
    """
    Test adding a new value to a leaf-list with non-incremental index.

    When adding a new value with index 7 (skipping indices 4-6) to the IPv6 Flow Label entry,
    the value should be properly added even if it is not maintaining the right order.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry/target-value", 0, 3, "fid-ipv6-flowlabel", 1, "di-bidirectional"): {
            "index": 7, "value": "vLw="
        }
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        { 
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}, 
                                {1: 7, 2: b"\xbc\xbc"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ], 
                    33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_add_new_key_value(test_context):
    """
    Test adding new key-value pair to an existing entry.

    When adding target values to the IPv6 Payload Length entry,
    the values should be properly added with the appropriate structure.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry/target-value", 0, 3, "fid-ipv6-payload-length", 1, "di-bidirectional"): [
            {"index": 0, "value": "UA=="}, 
            {"index": 1, "value": "VQ=="}
        ]
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"}
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"}
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084, 13: [{1: 0, 2: b"\x50"}, {1: 1, 2: b"\x55"}]},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ],
                    33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

def test_add_new_rule(test_context):
    """
    Test adding a completely new rule.

    When adding a new rule (5/3), the rule should be properly added
    with the right (value/length) even is something different is defined.
    """

    cc_manager: CORECONFManager
    cc_manager, _ = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule", 5, 3): {
            "rule-status": "ietf-schc:status-active",
            "rule-id-value": 10,  # difference here
            "rule-id-length": 5,  # difference here
            "rule-nature": "ietf-schc:nature-compression",
        }
    }

    expected_result: Dict = {
        5100: {
            1: [
                {
                    4: [
                        {1: 5015, 5: 5018, 6: 5068, 7: 4, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x06"}]},
                        {
                            1: 5014, 5: 5018, 6: 5065, 7: 8, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\xff"},
                                {1: 1, 2: b"\xfe"},
                                {1: 2, 2: b"\xf1"},
                                {1: 3, 2: b"\xf7"},
                            ]
                        },
                        {
                            1: 5014, 5: 5018, 6: 5061, 7: 20, 8: 1, 9: 5085,
                            13: [
                                {1: 0, 2: b"\x00\xef\x2d"},
                                {1: 1, 2: b"\x0f\xfe\x2d"},
                                {1: 2, 2: b"\x07\x77\x77"},
                                {1: 3, 2: b"\x0f\xf8\x5f"},
                            ]
                        },
                        {1: 5011, 5: 5018, 6: 5064, 7: 16, 8: 1, 9: 5084},
                        {1: 5015, 5: 5018, 6: 5063, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x11"}]},
                        {1: 5015, 5: 5018, 6: 5062, 7: 8, 8: 1, 9: 5083, 13: [{1: 0, 2: b"\x40"}]}
                    ], 33: 3, 34: 0, 35: 5088, 36: 5094
                },
                {33: 3, 34: 2, 35: 5091, 36: 5094},
                {33: 3, 34: 5, 35: 5088, 36: 5094}
            ]
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_equals(cc_manager, expected_result)

# ********************************************************************** #

  def test_add_entry_into_unknown_rule(test_context):
    """
    Test adding an entry into unknown rule.

    When adding a new object into unknown object, the result should
    remain unchanged because other fields, which are not keys, cannot
    be deducted at every depth of the context.
    """

    cc_manager: CORECONFManager
    original_context: Dict
    cc_manager, original_context = test_context

    yang_request: Dict = {
        ("/ietf-schc:schc/rule/entry", 250, 8, "fid-ipv6-payload-length", 1, "di-bidirectional"): {
            "field-length": 16,
            "matching-operator": "ietf-schc:mo-ignore",
            "comp-decomp-action": "ietf-schc:cda-value-sent",
        }
    }

    perform_modification(cc_manager, yang_request)
    verify_context_unchanged(cc_manager, original_context)
]]></artwork></figure>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC8724;
&RFC9363;
&RFC9254;
&I-D.ietf-core-comi;
&I-D.ietf-lpwan-architecture;
&I-D.toutain-schc-universal-option;
&I-D.toutain-schc-sid-allocation;


    </references>



<section anchor="yang-dm" title="YANG DM">

<t>rpc duplicate-rule {
        input {
          container from {
            uses ietf-schc:rule-id-type;
          }
          container to {
            uses ietf-schc:rule-id-type;
          }
        }
        output {
          leaf status {
            type string;
          }
        }
      }</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>The authors sincerely thank</t>

<t>This work was supported by the Sweden’s Innovation Agency VINNOVA within the EUREKA CELTIC-NEXT project CYPRESS.</t>

</section>


  </back>

<!-- ##markdown-source:
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
ZI55CiOZY55CnXnc55uGPH8+cqnV0vVltFZFdq2vPxKDfEs4Zw5znh3mzHTZ
uQnKYJYInl4DiIFwZ2pOEaUOLazj4cr8sshJWIXaMHiFwywLfO0B+/xFFZ0B
uBONJJ+7BK73ZWwu7O8H4deyNQUIZZ3Ti0thFTsFuZBmo7KQVRp1s6aWOdcE
OgWCL16Y8fekwBOp9XVM5tL6jHVCD9FhkTp+5vbyH5uySJzHgYojmWOiQp0i
JppeZw6Kvj5Q9BwzNo/n2CxsfiFMM71O7Smuf1UcJEQBCVEQ4jQI08hcWfEg
YKTvncAWhGphOjriH+sqVuBnCi3RqBVeojYqN1F0Zc/LEqnuvKI85aSJt3b3
BsKLJW1gnctreNbzQvhCrQDyAriV0RlxL0VQBWT7cox3Z/XtGwW+3bss1tGm
Pyp6ND31G8xS8f39Gdf8G7aPSbkmqMdJ1xOQ1pe7AwF/KxQ+ruuKrtc7p18Y
/fvWu5/FzoGDtMTjnvCz8RCJkC7h/JyTQTjO0gJnsV2QZJRZPDpYZDoIdCJy
VmgUm16P5X9aBe9q2wNd+oOt5X9FWVomHPey1YnGUj/YIEZWQRimt3uHjAT2
bfVQ5YfSP8ON8ASA+c0Lr/jszrnpZGGYjbqA032oeIyR3CwdRHGCN/724DHf
jhee40tYA11G8bm49OB1NsYfSkUjcU1KfXQpfRl+l4h9sAQXfP/D1hksA67F
p/13795/2qLVl/rxnt2PH3b/a0ts77493t923+3+eozLNTJY238//LB7dNRy
/h8lAQKu4tgAAA==

-->

</rfc>

